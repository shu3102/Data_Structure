#Linked List Overview

    A linked list is a linear data structure in which elements (called nodes) are stored in a sequence, where each node contains data and a reference (or link) to the next node in the sequence. Linked lists are dynamic in size and provide efficient insertion and deletion of nodes.

##Key Characteristics
    1. Dynamic Size: The list can grow or shrink at runtime by allocating or deallocating memory.
    2. Non-Contiguous Storage: Unlike arrays, elements in a linked list are not stored in contiguous memory locations.
    3. Node Structure: Each node in a linked list typically has two parts:
        Data: Stores the value.
        Pointer/Link: Stores the address of the next node in the list.

##Types of Linked Lists
    1. Singly Linked List
        Each node contains data and a link to the next node.
        Traversal is only possible in a forward direction.
        Structure
            [Data | Next] -> [Data | Next] -> ... -> NULL

    2. Doubly Linked List
        Each node contains data, a link to the next node, and a link to the previous node.
        Allows traversal in both forward and backward directions.
        Structure:
            NULL <-> [Prev | Data | Next] <-> [Prev | Data | Next] <-> ... <-> NULL

    3. Circular Linked List
        The last node’s next pointer points to the first node, forming a loop.
        Can be singly or doubly circular.
        Useful for applications where continuous looping is required.
        Structure (Singly Circular)
            [Data | Next] -> [Data | Next] -> ... -> [Data | Next] --\
                ^---------------------------------------/


#Basic Operations on Linked Lists
    ###Insertion
        At the Beginning: Adds a new node at the start.
        At the End: Adds a new node at the end.
        At a Specific Position: Adds a new node at a specific index.

    ###Deletion
        From the Beginning: Removes the first node.
        From the End: Removes the last node.
        From a Specific Position: Removes a node at a specific index.
    
    ###Traversal
        Visiting each node from the start to the end (or vice versa for doubly linked lists).
    
    ###Searching
        Finding a node with a specific value by traversing the list.

    ###Reversal
        Reversing the order of nodes in the list (reversing links in each node).

#Advantages of Linked Lists
    ##Dynamic Size: 
        Unlike arrays, linked lists can grow or shrink in size during runtime.

    ## Efficient Insertions/Deletions: 
        Adding or removing elements doesn’t require shifting elements, making these operations efficient, especially at the beginning or end of the list.

#Disadvantages of Linked Lists
    ##Memory Overhead: 
        Each node requires extra memory for storing a pointer (or two for doubly linked lists).

    ## Sequential Access: 
        Direct access to elements is not possible; nodes must be accessed sequentially, making it slower than array indexing.

    ## No Cache Locality: 
        Nodes are not stored in contiguous memory, so linked lists do not benefit from cache locality, potentially reducing performance.
    
#Applications of Linked Lists
    ##Implementing Stacks and Queues: 
        Linked lists can easily implement these data structures.

    ##Dynamic Memory Allocation: 
        Useful in cases where memory size needs to be adjusted dynamically.
    
    ##Undo Functionality in Applications: 
        Doubly linked lists are used in applications like editors for back-and-forth traversal.
    
    ##Circular Linked Lists in Music Players: 
        Useful in applications where a continuous cycle of elements is needed, like playlist management.


#Summary Table
Operation	    Time Complexity (Singly)	Time Complexity (Doubly)
Insertion (head)    	O(1)	                O(1)
Insertion (tail)	    O(n)	                O(1)
Deletion (head)	        O(1)	                O(1)
Deletion (tail)	        O(n)	                O(1)
Search	                O(n)	                O(n)


Linked lists provide flexibility for dynamic data manipulation, though they can incur higher memory usage and lack the speed of direct access due to their non-contiguous nature.