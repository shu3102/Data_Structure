// CODE store file







// An iterative function to do postorder traversal of a given binary tree
void postOrderIterative(bst t) {
    // Check for empty tree
    if (!t)
        return;

    node *root = t;

     stack S;
     init_stack(&S, 10);

    do
    {
        // Move to leftmost node
        while (root)
        {
            // Push root's right child and then root to stack.
            if (root->right)
                push_stack(&S, *root->right);
            push_stack(&S, *root);

            // Set root as root's left child
            root = root->left;
        }

        // Pop an item from stack and set it as root
        node nn1 = pop_stack(&S);
        root = &nn1;


        // If the popped item has a right child and the right child is not
        // processed yet, then make sure right child is processed before root
        if (root->right && peek_Stack(S) == root->right)
        {
            pop_stack(&S); // remove right child from stack
            push_stack(&S, *root); // push root back to stack
            root = root->right; // change root so that the right
            // child is processed next
        }
        else // Else print root's data and set root as NULL
        {
            printf("%d ", root->key);
            root = NULL;
        }
    } while (!isEmpty_stack(S));
}


